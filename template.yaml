AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for serverless asset bulk download

Globals:
  Function:
    Timeout: 3

Resources:
  #Buckets
  BulkDownloadZipBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}

  BulkDownloadZipFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bulk-download/
      Handler: app.zipHandler
      Runtime: nodejs12.x
      Timeout: 900
      Environment:
        Variables:
          BULK_DOWNLOAD_ZIP_BUCKET: !Ref BulkDownloadZipBucket
      Policies:
        - S3WritePolicy:
            BucketName: !Ref BulkDownloadZipBucket

  BulkDownloadCheckZipExistFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bulk-download/
      Handler: app.zipHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          BULK_DOWNLOAD_ZIP_BUCKET: !Ref BulkDownloadZipBucket
      Policies:
        - S3WritePolicy:
            BucketName: !Ref BulkDownloadZipBucket

  BulkDownloadStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
        - |-
          {
            "Comment": "A workflow for digital asset bulk download of DAM",
            "StartAt": "Check if zip files already exist in S3",
            "States": {
              "Check if zip files already exist in S3": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "${checkIfZipExistsLambda}",
                  "Payload": {
                    "Input.$": "$"
                  }
                },
                "Next": "Choice zip already exists"
              },
              "Choice zip already exists": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.zipExist",
                    "NumericEquals": 1,
                    "Next": "Generate Presigned URLs"
                  }
                ],
                "Default": "Concurrent Zip"
              },
              "Concurrent Zip": {
                "Type": "Map",
                "MaxConcurrency": 10,
                "Iterator": {
                  "StartAt": "Pass State",
                  "States": {
                    "Pass State": {
                      "Type": "Pass",
                      "End": true
                    }
                  }
                },
                "Next": "Generate Presigned URLs"
              },
              "Generate Presigned URLs": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "arn:aws:lambda:REGION:ACCOUNT_ID:function:FUNCTION_NAME",
                  "Payload": {
                    "Input.$": "$"
                  }
                },
                "Next": "Send message to SNS"
              },
              "Send message to SNS": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sns:publish",
                "Parameters": {
                  "TopicArn": "arn:aws:sns:us-east-1:ACCOUNT_ID:myTopic",
                  "Message": {
                    "Input": "Hello from Step Functions!"
                  }
                },
                "End": true
              }
            }
          }
        - {checkIfZipExistsLambdaArn: !GetAtt BulkDownloadCheckZipExistFunction.Arn}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

  BulkDownloadApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bulk-download/
      Handler: app.apiHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          ZIP_FUNCTION: !Ref BulkDownloadZipFunction
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref BulkDownloadZipFunction
      Events:
        RequestDownload:
          Type: HttpApi
          Properties:
            Path: /request
            Method: post

Outputs:
  BulkDownloadTriggerFunctionApi:
    Description: "API Http Gateway endpoint URL"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/request"
  BulkDownloadZipBucket:
    Description: "Bucket where zip files are uploaded"
    Value: !GetAtt BulkDownloadZipBucket.Arn
  BulkDownloadApiFunction:
    Description: "API Proxy lambda"
    Value: !GetAtt BulkDownloadApiFunction.Arn
  BulkDownloadZipFunction:
    Description: "Lambda that builds a zip file"
    Value: !GetAtt BulkDownloadZipFunction.Arn
